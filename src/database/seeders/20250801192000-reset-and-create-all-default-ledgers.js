'use strict';


module.exports = {
  async up (queryInterface, Sequelize) {
    await queryInterface.bulkDelete('ledgers', {}, {});
    console.log('Deleted all existing ledgers');

    await queryInterface.sequelize.query('ALTER SEQUENCE ledgers_id_seq RESTART WITH 1');
    console.log('Reset ledger ID sequence to start from 1');

    const requiredGroups = [
      {
        groupName: 'Capital Account',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Income',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Capital Account',
        sortOrder: 1,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Cash-in-Hand',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Asset',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Cash-in-Hand',
        sortOrder: 2,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Bank Accounts',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Asset',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Bank Accounts',
        sortOrder: 3,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Sales Accounts',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Income',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Sales Accounts',
        sortOrder: 4,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Purchase Accounts',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Expense',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Purchase Accounts',
        sortOrder: 5,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Indirect Expenses',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Expense',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Indirect Expenses',
        sortOrder: 6,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Indirect Incomes',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Income',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Indirect Incomes',
        sortOrder: 7,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Duties & Taxes',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Liability',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Duties & Taxes',
        sortOrder: 8,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Sundry Debtors',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Asset',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Sundry Debtors',
        sortOrder: 9,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Sundry Creditors',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Liability',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Sundry Creditors',
        sortOrder: 10,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Secured Loans',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Liability',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Secured Loans',
        sortOrder: 11,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Unsecured Loans',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Liability',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Unsecured Loans',
        sortOrder: 12,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        groupName: 'Loans & Advances (Asset)',
        undergroup: 'Primary',
        parentGroupId: null,
        groupType: 'Asset',
        isDefault: true,
        isEditable: false,
        isDeletable: false,
        prohibit: 'No',
        description: 'Default group: Loans & Advances (Asset)',
        sortOrder: 13,
        status: 'Active',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    const existingGroups = await queryInterface.sequelize.query(
      'SELECT id, "groupName" FROM groups WHERE "groupName" IN (?)',
      {
        replacements: [requiredGroups.map(g => g.groupName)],
        type: Sequelize.QueryTypes.SELECT
      }
    );

    const existingGroupNames = existingGroups.map(g => g.groupName);
    const newGroups = requiredGroups.filter(group => !existingGroupNames.includes(group.groupName));

    if (newGroups.length > 0) {
      await queryInterface.bulkInsert('groups', newGroups, {});
    }

    const groups = await queryInterface.sequelize.query(
      'SELECT id, "groupName" FROM groups WHERE "groupName" IN (?)',
      {
        replacements: [requiredGroups.map(g => g.groupName)],
        type: Sequelize.QueryTypes.SELECT
      }
    );

    const groupMap = {};
    groups.forEach(group => {
      groupMap[group.groupName] = group.id;
    });



    const defaultLedgers = [
      {
        ledgerName: 'Capital Account',
        acgroup: groupMap['Capital Account'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 1,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Drawings',
        acgroup: groupMap['Capital Account'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 2,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Cash',
        acgroup: groupMap['Cash-in-Hand'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 3,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Bank Account',
        acgroup: groupMap['Bank Accounts'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description', 'address']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 4,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Sales',
        acgroup: groupMap['Sales Accounts'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 5,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Purchase',
        acgroup: groupMap['Purchase Accounts'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 6,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Salaries',
        acgroup: groupMap['Indirect Expenses'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 7,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Rent Paid',
        acgroup: groupMap['Indirect Expenses'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 8,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Telephone Expenses',
        acgroup: groupMap['Indirect Expenses'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 9,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Electricity Charges',
        acgroup: groupMap['Indirect Expenses'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 10,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Commission Received',
        acgroup: groupMap['Indirect Incomes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 11,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Discount Received',
        acgroup: groupMap['Indirect Incomes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 12,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'CGST Input',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 13,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'SGST Input',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 14,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'IGST Input',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 15,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'CGST Input (RCM)',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 16,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'SGST Input (RCM)',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 17,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'IGST Input (RCM)',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 18,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'CGST Output',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 19,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'SGST Output',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 20,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'IGST Output',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 21,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Sundry Debtors',
        acgroup: groupMap['Sundry Debtors'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description', 'address']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 22,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Sundry Creditors',
        acgroup: groupMap['Sundry Creditors'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description', 'address']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 23,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Sales Return',
        acgroup: groupMap['Sales Accounts'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 24,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Purchase Return',
        acgroup: groupMap['Purchase Accounts'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 25,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Loan from Bank',
        acgroup: groupMap['Secured Loans'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 26,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Loan from Friends',
        acgroup: groupMap['Unsecured Loans'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 27,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Depreciation',
        acgroup: groupMap['Indirect Expenses'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 28,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Income Tax',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 29,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'TDS Receivable',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 30,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'TDS Payable',
        acgroup: groupMap['Duties & Taxes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 31,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Advance to Staff',
        acgroup: groupMap['Loans & Advances (Asset)'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description', 'address']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 32,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Interest Received',
        acgroup: groupMap['Indirect Incomes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 33,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Interest Paid',
        acgroup: groupMap['Indirect Expenses'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Debit',
        isActive: true,
        status: 'Active',
        sortOrder: 34,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        ledgerName: 'Rounding Off',
        acgroup: groupMap['Indirect Incomes'],
        isDefault: true,
        isEditable: true,
        isDeletable: false,
        editableFields: JSON.stringify(['openingBalance', 'balanceType', 'description']),
        openingBalance: 0.00,
        balance: 0.00,
        balanceType: 'Credit',
        isActive: true,
        status: 'Active',
        sortOrder: 35,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    const validLedgers = defaultLedgers.filter(ledger => ledger.acgroup);

    if (validLedgers.length > 0) {
      await queryInterface.bulkInsert('ledgers', validLedgers, {});
      console.log(`Successfully created ${validLedgers.length} default ledgers with clean IDs starting from 1`);
    }
  },

  async down (queryInterface, Sequelize) {
    await queryInterface.bulkDelete('ledgers', { isDefault: true }, {});
  }
}; 